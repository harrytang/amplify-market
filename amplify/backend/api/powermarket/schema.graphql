type Market @model {
  id: ID!
  name: String!
  tags: [String]
  owner: String!
  createdAt: String
  products: [Product] @connection(name: "MarketProduct", sortField: "createdAt")
}

type Product @model @auth(rules: [{allow: owner, identityField: "sub"}]) {
  id: ID!
  descriptopn: String!
  file: S3Obj!
  price: Float!
  deliveryMethod: String!
  owner: String!
  createdAt: String
  market: Market @connection(name: "MarketProduct")
}

type S3Obj {
  bucket: String!
  region: String!
  key: String!
}

type User @model(
  queries: {get: "getUser"},
  mutations: {create: "registerUser", update: "updateUser"},
  subscriptions: null
) {
  id: ID!
  username: String!
  email: String!
  registered: Boolean!
  orders: [Order] @connection(name: "UserOrders", sortField: "createdAt")
}

type Order @model(
  queries: null,
  mutations: {create: "createOrder"},
  subscriptions: null
) {
  shippingAddress: ShippingAddress
  createdAt: String
  product: Product @connection
  user: User @connection(name: "UserOrders")
}

type ShippingAddress {
  city: String!
  country: String!
  address_line1: String!
  address_state: String!
  address_zip: String!
}